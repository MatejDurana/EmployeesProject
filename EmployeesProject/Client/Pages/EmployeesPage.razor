@page "/employees"

@using Blazored.Modal
@using Blazored.Modal.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3>Employees</h3>

@if(employees == null)
{
    <p>Loading employees</p>
}
else{
<table class="table w-50">
    <thead>
        <tr>
            <th>Name</th>
            <th>Surname</th>
        </tr>
    </thead>
    <tbody>
        @if (employees.Count() == 0)
        {
            <tr>
                <td colspan="2" align="center">No Employees Found</td>
            </tr>
        }
        else
        {
            @foreach (var employee in employees)
            {
                <tr>
                    <td>
                        <span role="button" @onclick="(() => ShowEmployeePopup(employee))"> @employee.Name </span>
                    </td>
                    <td>
                        <span role="button" @onclick="(() => ShowEmployeePopup(employee))"> @employee.Surname </span>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
}


<button @onclick="(() => AddEmployeeRedirect())" class="btn btn-primary">Create new employee</button>
<button @onclick="(() => ImportEmployeeRedirect())" class="btn btn-primary">Import new employees</button>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task ShowEmployeePopup(Employee employee)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EmployeePopup.showedEmployee), employee);

        Modal.Show<EmployeePopup>("Employee detail", parameters);
    }
   

    List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        var result = await EmployeeService.GetAllEmployees();
        employees = result.Data;
    }

    void AddEmployeeRedirect()
    {
        NavigationManager.NavigateTo("employee");
    }
    void ImportEmployeeRedirect()
    {
        NavigationManager.NavigateTo("employees-import");
    }
}
