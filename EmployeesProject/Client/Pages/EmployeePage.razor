@page "/employee"
@page "/employee/{id:int}"


@inject IEmployeeService EmployeeService
@inject IPositionService PositionService
@inject NavigationManager NavigationManager
@inject IToastService toastService

@if (Id == null)
{
    <PageTitle>Create a new employee</PageTitle>
    <h3>Create a new employee</h3>
}
else
{
    <PageTitle>Edit @employee.Name @employee.Surname</PageTitle>
    <h3>Edit @employee.Name @employee.Surname</h3>
}

<EditForm Model="employee" OnValidSubmit="HandleSubmit">
    <div>
        <label for="nameId">Name</label>
        <InputText id="nameId" @bind-Value="employee.Name" class="form-control" />
        <ValidationMessage For="@(() => employee.Name)" />
    </div>
    <div>
        <label for="surnameId">Surname</label>
        <InputText id="surnameId" @bind-Value="employee.Surname" class="form-control" />
        <ValidationMessage For="@(() => employee.Surname)" />

    </div>
    <div>
        <label for="birthDateId">Birth Date</label>
        <InputDate id="birthDateId" @bind-Value="employee.BirthDate" class="form-control" />
        <ValidationMessage For="@(() => employee.BirthDate)" />
    </div>
    <div>
        <label for="positionId">Select position</label>
        <InputSelect class="form-control" id="positionId" @bind-Value="employee.PositionId">
            <option value=""></option>
            @foreach (var position in positions)
            {
                <option value="@position.Id">@position.PositionName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => employee.PositionId)"/>
    </div>
    <div>
        <label for="ipAddressId">IP Address</label>
        <InputText id="ipAddressId" @bind-Value="employee.IPAddress" class="form-control" />
        <ValidationMessage For="@(() => employee.IPAddress)" />

    </div>
        
    <br/>
    <button type="submit" disabled="@disabledBtns" class="btn btn-primary">@btnText</button>

    <DataAnnotationsValidator />

</EditForm>




@if (Id != null)
{
    <br />
    <button disabled="@disabledBtns" @onclick="(() => DeleteEmployee())" class="btn btn-danger">Delete employee</button>
}

<BlazoredToasts SuccessIcon="fa fa-thumbs-up" ErrorIcon="error_outline" Position="ToastPosition.BottomRight" />

@code {
    [Parameter]
    public int? Id { get; set; }

    private bool disabledBtns = false;
    private string btnText = string.Empty;
    private List<Position> positions = new List<Position>();

    [Parameter]
    public Employee employee { get; set; } = new Employee()
    {
        BirthDate = new DateTime(1990, 1, 1),
        IPCountryCode = "",
        Position = new Position()
    };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new employee" : "Update employee";

        positions = await PositionService.GetAllPositions();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await EmployeeService.GetEmployeeById((int)Id);
            if (result != null && result.Data != null)
            {
                employee = result.Data;
            }
            else
                NavigationManager.NavigateTo("/employee");
        }
    }


    async Task HandleSubmit()
    {
        disabledBtns = true;
        
        var position = positions.FirstOrDefault(p => p.Id == employee.PositionId);
        if(position == null)
        {
            HandleError("The position you set doesn't exist.");
            return;
        }
        else
            employee.Position = position;

        if (Id == null)
        {
            var response = await EmployeeService.AddEmployee(employee);
            await HandleResponse(response);
        }
        else
        {
            var response = await EmployeeService.UpdateEmployee(employee);
            await HandleResponse(response);
        }
        disabledBtns = false;
    }

    async Task DeleteEmployee()
    {
        disabledBtns = true;
        var response = await EmployeeService.DeleteEmployee(employee.Id);
        await HandleResponse(response);
        disabledBtns = false;
    }

    async Task HandleResponse<T>(ServiceResponse<T> response)
    {
        if (response.Success)
            await HandleSuccess(response.Message);
        else
            HandleError(response.Message);
    }

    async Task HandleSuccess(string message)
    {
        toastService.ShowSuccess(message);
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/employees");
    }
    void HandleError(string message)
    {
        toastService.ShowError(message);
    }


}
